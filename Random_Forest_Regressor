# -*- coding: utf-8 -*-
"""Copy of LIN REG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18jg_IzDLvJ9FzvCuFuv0DopdrscuYVU-
"""

import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

import math

import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/insurance_data.csv')

df.head()

df.isna().sum()

y = df['claim']
x= df.drop(columns=['claim','PatientID','index'])

xmean = x['age'].mean()
x['age']=x['age'].fillna(xmean)
x['male']=x['gender']=='male'
x['smoker']=x['smoker']=='Yes'
x['diabetic']=x['diabetic']=='Yes'
x['northeast']=x['region']=='northeast'
x['southeast']=x['region']=='southeast'
x['northwest']=x['region']=='northwest'
x['southwest']=x['region']=='southwest'
x=x.drop(columns=['gender'])
x=x.drop(columns=['region'])

x.head()

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = .2, random_state=20)

model = RandomForestRegressor(max_depth=4,n_estimators =300)
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test,y_pred)
print(mse)

r = r2_score(y_test,y_pred)
print(r)

rmse = math.sqrt(mean_squared_error(y_test,y_pred))
print(rmse)

from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import randint

param_dist = {'n_estimators': randint(50,500),
              'max_depth': randint(1,20)}

rf = RandomForestRegressor()

rand_search = RandomizedSearchCV(rf,
                                 param_distributions = param_dist,
                                 n_iter=5,
                                 cv=5)

rand_search.fit(x_train, y_train)

# @title Default title text
best_rf = rand_search.best_estimator_
print('Best hyperparameters:',  rand_search.best_params_)

from sklearn.tree import export_graphviz
from IPython.display import Image
import graphviz

for i in range(3):
    tree = model.estimators_[i]
    dot_data = export_graphviz(tree,
                               feature_names=x_train.columns,
                               filled=True,
                               max_depth=4,
                               impurity=False,
                               proportion=True)
    graph = graphviz.Source(dot_data)
   ## graph.save()
    display(graph)
    filnam = '/content/pic'+str(i)
    graph.render(filename=filnam, format='jpg')

import joblib
joblib.dump(model, 'insurance_claims.joblib')

x_train.to_csv("/content/x_train.csv", index = False)
y_train.to_csv("/content/y_train.csv", index = False)
x_test.to_csv("/content/x_test.csv", index = False)
y_test.to_csv("/content/y_test.csv", index = False)
